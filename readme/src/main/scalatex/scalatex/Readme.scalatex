
@import Main._
@import site._


@sect{Scalatex 0.1.0}
  @i{Programmable Documents in Scala}

  @exampleRef("helloWorld", "scala html")

  @p
    @a("Scalatex", href:="https://github.com/lihaoyi/Scalatex") is a language for generating rich HTML documents in Scala. It lets you write your HTML in a hierarchical DSL which then gets compiled to HTML. In Scalatex, everything is part of the output document, except for tokens marked with an @hl.scala{@@} sign. These correspond to HTML tags (provided by @a("Scalatags", href:="https://github.com/lihaoyi/scalatags")), values you want to interpolate, control flow statements, function calls (or definitions!), basically anything that isn't plain text.

  @p
    Scalatex allows you to DRY up your documents the same way you DRY your code. Unlike most templating languages, Scalatex is a thin shim on top of the Scala programming language. This means that some things which require built-in support or are otherwise impossible in other document/static-site-generators are completely trivial with Scalatex, for example:
  @ul
    @li
      Extracting the structure of the document as a @sect.ref{Section}, which you can use to generate a navigation bar or @sect.ref{Generating a Table of Contents}
    @li
      Enforcing that @sect.ref("Finding Dead Links", "all internal links point to a valid document header, and all external links point to a valid URL")
    @li
      @sect.ref("Highlighter", "Fetching snippets of text from files on disk") to e.g. use unit-test-code as examples in the docs
    @li
      Easily defining @sect.ref{Custom Tags} to encapsulate repetitive fragments of your document, e.g. an image-with-caption or code-snippet-with-link.

  @p
    All these things are trivial and elegant to perform with Scalatex, and difficult or messy to do with other static-site-generators. Although Scalatex generates HTML, you can easily build up whatever tags best describe what @i{you} want to do, and use those to build your document, rather than relying on the ad-hoc and messy set provided by browsers.

  @sect{Getting Started}
    @p
      To get started with Scalatex, add the following to your @code{project/build.sbt}:

    @hl.scala
      addSbtPlugin("com.lihaoyi" %% "scalatex" % "0.1.0")

    @p
      And the following to your project in your @code{build.sbt}:

    @hl.scala
      project.settings(scalatex.SbtPlugin.projectSettings:_*)

    @p
      To begin with, let's create a file in @code{src/main/scalatex/Hello.scalatex}

    @hl.ref("site/src/test/scalatex/scalatex/site/Hello.scalatex")

    @p
      Next, you can simply call

    @hl.ref("site/src/test/scala/scalatex/site/Tests.scala", Seq("Hello().render"), Seq(""), "scala")

    @p
      And it'll print out

    @hl.ref("site/src/test/scala/scalatex/site/Tests.scala", Seq("<div>"), Seq("\"\"\""), "html")


    @p
      There we have it, your first Scalatex document! You can put this on gh-pages, use it on a website, or where-ever you want.

  @sect{What Scalatex Does}

    @p
      Scalatex converts every @code{.scalatex} file in its source folder into a corresponding Scala @code{object}. These objects have an @hl.scala{apply} method which returns a Scalatags @hl.scala{Frag}, which you can then call @hl.scala{.render} on to give you a HTML string. You can also do other things with the Scalatags @hl.scala{Frag}, but to learn more about it and Scalatags in general take a look at the Scalatags documentation.

    @p
      Inside each Scalatex file, @hl.scala{@@}-escaped things correspond to Scala keywords or names that are currently in scope. Apart from keywords, only @hl.scala{scalatags.Text.all._} is imported by default. This brings in all the HTML tags that we used above to build those HTML fragments. However, you can also @hl.scala{@@import} whatever other names you want, or refer to them fully qualified.

  @sect{Exploring Scalatex}
    @exampleRef("variousSyntaxes", "scala html")

    @p
      Superficially, Scalatex does a small number of translations to convert the @code{.scalatex} document into Scala code:

    @ul
      @li
        @hl.scala{@@}-escapes followed by identation (like @hl.scala{@@div} above) are passed all the subsequently-indented lines as children.
      @li
        @hl.scala{@@}-escapes followed by curly braces (like @hl.scala{@@h2} above) are passed everything inside the curly braces as children
      @li
        @hl.scala{@@}-escapes followed by parentheses (like @hl.scala{@@h1} above) are passed the contents of the parentheses as a Scala expression.
      @li
        Everything outside of a set of parentheses, that isn't an @hl.scala{@@}-escape, is treated as a string.

    @p
      This accounts for the variation in syntax that you see above. In general, you almost always want to use identation-based blocks to delimit large sections of the document, only falling back to curly braces for one-line or one-word tags like @hl.scala{@@h2} or @hl.scala{@@b} above.

    @sect{Loops}
      @exampleRef("loops", "scala scala html")

      @p
        Scalatex supports for-loops, as shown above. Again, everything inside the parentheses are an arbitrary Scala expression. Here we can see it binding the @hl.scala{x} value, which is then used in the body of the loop as @hl.scala{@@x} to splice it into the document.
      @p
        In general, there are always two contexts to keep track of:

      @ul
        @li
          Scalatex: strings are raw @code{text}, but variables are escaped as @hl.scala{@@x}
        @li
          Scala: strings are enclosed e.g. @code{"text"}, but variables are raw @hl.scala{x}

      @p
        The value of strings or variables is completely identical in both contexts; it's only the syntax that differs.

    @sect{Conditionals}
      @exampleRef("conditionals", "scala html")

      @p
        Scalatex supports @hl.scala{if}-@hl.scala{else} statements, that behave as you'd expect. Here we're using one in conjunction with a loop to alternate the formatting of different items in a list.

    @sect{Functions}
      @exampleRef("functions", "scala html")

      @p
        Apart from splicing values into the document, you can also call functions, such as @hl.scala{math.sqrt} here.

    @sect{Interpolations}
      @exampleRef("simple", "scala scala html")

      @p
        You can also splice the result of arbitrary chunks of code within a Scalatex document. Using parens @hl.scala{()} lets you splice a single expression, whereas using curlies @hl.scala{{}} lets you splice a block which can contain multiple statements.

      @p
        Blocks can span many lines:

      @exampleRef("multiline", "scala html")

    @sect{External Definitions}
      @p
        You can use imports to bring things into scope, so you don't need to keep referring to them by their full name:

      @exampleRef("imports", "scala html")
      @p
        Since you can splice the value of any Scala expressions, of course you can splice the values that you defined yourself somewhere else:

      @hl.ref("api/src/test/scala/scalatex/ExampleTests.scala", "object Stuff", "'externalDefinitions", "scala")

      @exampleRef("externalDefinitions2", "scala html")

  @sect{Scalatex Site}
    @p
      The core of Scalatex is a very small, superficial translation from the @hl.scala{.scalatex} syntax to a @a("Scalatags", href:="https://github.com/lihaoyi/scalatags") fragment, letting you spit out HTML strings. Nevertheless, there are other concerns common to most (all?) documents, and Scalatags provides a number of common utilities in

    @hl.scala
      addSbtPlugin("com.lihaoyi" %% "scalatex-site" % "0.1.0")

    @p
      Here are a number of them.

    @sect{Section}
      @p
        One concern common to almost all documents is the idea of a section hierarchy: a tree of document sections where each section has a header and some contents, potentially containing more (smaller) sections. Scalatext provides the @hl.scala{scalatex.site.Section} helper that lets you do this easily:

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/section/Example1.scalatex")
        @half
          @exampleWrapper
            @section.Example1()

      @p
        As you can see, all the indented sections are automatically set to smaller headings. This is of course doable manually with @hl.scala{@@h1} @hl.scala{@@h2} @hl.scala{@@h3} tags etc., but then you have to manually keep track of how deep something is. With @hl.scala{Section}, this is kept track of for you.

      @p
        You can override the default rendering of @hl.scala{Section}s to e.g. use different headers:

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/section/Example2.scalatex", Nil, "@sect")
        @half
          @exampleWrapper
            @section.Example2()

      @p
        Above, you see it using bold, underlines and italics to delimit the boundaries between headers. You can also override things in more detail

      @p
        You can use @hl.scala{@@sect.ref} to link to another part of the document:

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/section/Example3.scalatex")
        @half
          @exampleWrapper
            @section.Example3()

      @p
        Any links created with @hl.scala{@@sect.ref} are stored in an @hl.scala{@@sect.usedRefs} property as a list. We also expose a @hl.scala{@@sect.structure} property which allows you to inspect the tree of sections.

      @p
        Here we're just stringifying the @hl.scala{Tree} structure and placing it as text on the page, but you can easily recurse over the @hl.scala{Tree} structure and use it to e.g. build a table of contents, or a navigation bar. You can also compare the two structures to validate the internal links and ensure that none of our @hl.scala{@@sect.ref}s are broken.

    @sect{Highlighter}
      @p
        Scalatex Site provides a @hl.scala{Highlighter} class, which lets you easily highlight snippets of code pulled from files on disk. First, you need to instantiate a @hl.scala{Highlighter} object:

      @hl.ref("readme/src/main/scala/scalatex/highlighter/hl.scala")
      @p
        Once you have done so, you can use it to reference files in your code base in whole; e.g. here is Scalatex's plugins file:

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/highlighter/Example1.scalatex")
        @half
          @exampleWrapper
            @highlighter.Example1()

      @p
        From the line containing a key-string to the line containing another; here is parts of Scalatex's build file, from @hl.scala{lazy val api} to the next @hl.scala{lazy val}:

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/highlighter/Example2.scalatex")
        @half
          @exampleWrapper
            @highlighter.Example2()

      @p
        Using multiple key-strings to navigate to a particular start- or end- line; here is the body of the unit test @hl.scala{scalatex.BasicTests.parenArgumentLists.attributes}, only from the @hl.scala{check} to the @hl.scala("}") closing that test.

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/highlighter/Example3.scalatex")
        @half
          @exampleWrapper
            @highlighter.Example3()


      @p
        Note the spaces before the @hl.scala("}"), which ensures that it doesn't grab the earlier @hl.scala("}") in the string-literal which is part of the test body.

      @p
        Lastly, you can define a @hl.scala{pathMappings} property, which is a sequence of prefixes which the highlighter tries to match against the files you're referencing. If any of them match, a link is generated (in the top right corner of the code snippet) containing the mapped path prefix combined with the remainder of the file path. Here's one that links everything to github:

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/highlighter/Example4.scalatex")
        @half
          @exampleWrapper
            @highlighter.Example4()


      @p
        In general, this is very helpful to quickly grab snippets of code from your unit tests, examples, or other places to include in your document.

    @sect{Site}
      @p
        Finally, if all you want is to produce a working, pretty website without having to set up CSS and hosting and all that yourself, Scalatex provides a @hl.scala{Site} trait which lets you do this easily:

      @hl.ref("site/src/test/scala/scalatex/site/Tests.scala", Seq("'Site", "'simple", "val site"), "def check")

      @p
        This will result in a single HTML file @code{index.html} in the @code{site/target/output/} folder, as .well as a the Javascript for @a("Highlight.js", href:="https://highlightjs.org/") and css for @a("Font Awesome", href:="http://fortawesome.github.io/Font-Awesome/") and @a("Less CSS", href:="http://purecss.io/") bundled together into @code{scripts.js} and @code{styles.css}. From there, you can simply copy the whole folder and serve it on whatever static file hosting (Github Pages, S3, etc.).

      @p
        Although @hl.scala{Site} provides reasonable defaults for all these things they are entirely customizable, and you just need to override various definitions when instantiating the @hl.scala{Site}. For example, here's a slightly more complex @hl.scala{Site} that generates multiple HTML pages (@code{page1.html} and @code{page2.html}) and generates them with custom names for the CSS and Javascript bundles.

      @hl.ref("site/src/test/scala/scalatex/site/Tests.scala", Seq("'Site", "'overriding", "val site"), "val page1")

      @p
        There are several other things you to can override, for a full list, look at the source code of @hl.scala{Site} to see what's available.

  @sect{Advanced Techniques}
    @p
      This section goes through a number of things which are not part of Scalatex by default, but are easily doable by extending Scalatex with snippets of Scala code. In general, all of these are probably sufficiently ad-hoc that the exact implementation would vary from project to project and so a built-in implementation wouldn't make sense.
    @sect{Custom Tags}
      @p
        Since tags are just functions, it is easy to define custom tags just by defining your own function that returns a Scalatags fragment. For example, auto-linking URL-looking-text isn't built in as part of Scalatex, but here's a custom tag that adds the capability:


      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/advanced/CustomTags1.scalatex")
        @half
          @exampleWrapper
            @scalatex.advanced.CustomTags1()


      @p
        Again, if you are using the @hl.scala{@@def} in multiple files you can define it in Scala code and import it, but if you're only using it in one @code{.scalatex} file you can simply define it locally.

      @p
        Note how we check for the @code{://} inside the URL and default it to @code{http://} if it's missing; this is just plain-old-Scala, since the tag is just a Scala function.

    @sect{Finding Dead Links}
      @p
        Because a tag is just a function, it is trivial to add additional capabilities to it. For example, here is a version which keeps track of links that you used in the document:

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/advanced/CustomTags2.scalatex")
        @half
          @exampleWrapper
            @scalatex.advanced.CustomTags2()


      @p
        This makes it very easy to aggregate the list of all-external-links in the application. For example, if you wished to check for dead out-going links, it is trivial to loop over these URLs, since a HTTP request to each one, and verify that they all return 200s.

      @p
        For internal links, i.e. references between different sections of your document, this is even easier: you have all the data needed to decide if a ref is invalid right away! Scalatex's @hl.scala{Section} objects automatically aggregate all internal links defined using @hl.scala("@sect.ref{...}"), all sections defined using @hl.scala("@sect{...}"), and you can easily compare them:

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/advanced/DeadSectRefs.scalatex")
        @half
          @exampleWrapper
            @scalatex.advanced.DeadSectRefs()

      @p
        Note how the typo @code{Page with Ref} instead of @code{Page with Refs} was immediately picked up. This example simply prints it to the page, but you could add an assert if you really wanted to ensure it didn't happen.

    @sect{Generating a Table of Contents}
      @p
        Generating a TOC has also traditionally been a pain point for documents. There are two common scenarios:

      @ul
        @li
          The TOC is kept and maintained manually, separate from the document. This gives you full flexibility to customize it, at the cost of it easily falling out of date if the document changes.
        @li
          The TOC is auto-generated from the document with a tool that makes it difficult to customize. This often results in a TOC with is hard to customize, which you can only do using some clunky configuration language.
      @p
        With Scalatex, generating a TOC from the document is both easy and customizable. Here is a trivial example:

      @pairs
        @half
          @hl.ref("readme/src/main/scalatex/scalatex/advanced/TableOfContents.scalatex")
        @half
          @exampleWrapper
            @scalatex.advanced.TableOfContents()

      @p
        As you can see, one short recursive function and is all that is necessary to transform the captured structure into a tree! If you wish you can trivially modify this function to e.g. generate different HTML/CSS, only show top-level or top-and-second-level headers, or all manner of other things.
